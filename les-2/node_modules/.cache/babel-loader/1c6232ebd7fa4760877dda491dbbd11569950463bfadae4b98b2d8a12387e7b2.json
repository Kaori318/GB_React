{"ast":null,"code":"var _jsxFileName = \"E:\\\\GEEKBRAINS\\\\REACT\\\\homework\\\\GB_React\\\\les-2\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport useStyles from './style';\nimport InteractiveList from './components/Chat';\nimport { Form } from './components/Form';\nimport { Message } from './components/Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const classes = useStyles();\n  const [messageList, setMessageList] = useState([]);\n  const [messageBody, setMessageBody] = useState({\n    text: '',\n    author: ''\n  });\n  const [messages, setMessages] = useState([]);\n  const addMessage = newMessage => {\n    setMessages([...messages, newMessage]);\n  };\n  const ROBOT_MESSAGE = 'Сообщение получено';\n  useEffect(() => {\n    if (messageList.length > 0 && messageList.slice(-1)[0].author !== 'robot') {\n      setTimeout(() => {\n        setMessageList(pervstate => [...pervstate, {\n          text: ROBOT_MESSAGE,\n          author: 'robot'\n        }]);\n      }, 1000);\n    }\n  }, [messageList]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: classes.container,\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(InteractiveList, {\n        className: classes.chat,\n        author: author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.message,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messageList\",\n          children: messageList.map((e, i) => /*#__PURE__*/_jsxDEV(Message, {\n            text: e.text,\n            author: e.author\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reverse\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            data: messageBody,\n            setData: setMessageBody,\n            setMessage: setMessageList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n// <div className=\"App\">\n\n//   \n// </div>\n// export default App;\n\n// import './App.css';\n// import React, {useState, useEffect} from 'react'\n\n// function App() {\n\n//   const [messageList, setMessageList] = useState([])\n//   const [messageBody, setMessageBody] = useState({\n//     text: '',\n//     author: '',\n//   })\n\n//   const ROBOT_MESSAGE = 'Сообщение получено'\n\n//   useEffect(() => {\n//     if(messageList.length > 0 && messageList.slice(-1)[0].author !== 'robot') {\n//       setTimeout(()=>{\n//         setMessageList(pervstate => [...pervstate, {text:ROBOT_MESSAGE, author: 'robot'}])\n//       }, 1000)\n//     }\n//   },[messageList])\n\n//   return (\n// \n//     // <div className=\"App\">\n//     //   <div className=\"reverse\">\n//     //     <Form data={messageBody} setData={setMessageBody} setMessage={setMessageList}></Form>\n//     //   </div>\n//     //   <div className='messageList'>\n//     //     {\n//     //       messageList.map((e,i)=><Message text={e.text} author={e.author} key={i}></Message>)\n//     //     }\n//     //   </div> \n//     // </div>\n//   );\n// }\n\n// export default App;\n_s(App, \"LzAYQ3+Ks8jbdCbOOpQIbTF0LnY=\", false, function () {\n  return [useStyles];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","CssBaseline","Typography","Container","useStyles","InteractiveList","Form","Message","App","classes","messageList","setMessageList","messageBody","setMessageBody","text","author","messages","setMessages","addMessage","newMessage","ROBOT_MESSAGE","length","slice","setTimeout","pervstate","container","chat","message","map","e","i"],"sources":["E:/GEEKBRAINS/REACT/homework/GB_React/les-2/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport useStyles from './style'\nimport InteractiveList from './components/Chat'\nimport {Form} from './components/Form'\nimport { Message } from './components/Message';\n\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [messageList, setMessageList] = useState([])\n  const [messageBody, setMessageBody] = useState({\n      text: '',\n      author: '',\n    })\n    const [messages, setMessages] = useState([])\n\n    const addMessage = (newMessage) => {\n      setMessages([...messages, newMessage])\n    }\n\n    const ROBOT_MESSAGE = 'Сообщение получено'\n    \n    useEffect(() => {\n      if(messageList.length > 0 && messageList.slice(-1)[0].author !== 'robot') {\n        setTimeout(()=>{\n          setMessageList(pervstate => [...pervstate, {text:ROBOT_MESSAGE, author: 'robot'}])\n        }, 1000)\n      }\n    },[messageList])\n  \n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container className={classes.container} maxWidth=\"md\">\n        <InteractiveList className={classes.chat} author={author}/>\n        <Typography\n          className={classes.message}>\n            <div className='messageList'>{\n     messageList.map((e,i)=><Message text={e.text} author={e.author} key={i}></Message>)\n      }\n    </div> \n    <div className=\"reverse\">\n        <Form data={messageBody} setData={setMessageBody} setMessage={setMessageList}></Form>\n      </div>\n        </Typography>\n      </Container>\n    </React.Fragment>\n  );\n}\n\n\n\n \n\n  \n\n    // <div className=\"App\">\n      \n    //   \n    // </div>\n// export default App;\n\n\n// import './App.css';\n// import React, {useState, useEffect} from 'react'\n\n\n// function App() {\n\n//   const [messageList, setMessageList] = useState([])\n//   const [messageBody, setMessageBody] = useState({\n//     text: '',\n//     author: '',\n//   })\n\n//   const ROBOT_MESSAGE = 'Сообщение получено'\n\n//   useEffect(() => {\n//     if(messageList.length > 0 && messageList.slice(-1)[0].author !== 'robot') {\n//       setTimeout(()=>{\n//         setMessageList(pervstate => [...pervstate, {text:ROBOT_MESSAGE, author: 'robot'}])\n//       }, 1000)\n//     }\n//   },[messageList])\n\n//   return (\n// \n//     // <div className=\"App\">\n//     //   <div className=\"reverse\">\n//     //     <Form data={messageBody} setData={setMessageBody} setMessage={setMessageList}></Form>\n//     //   </div>\n//     //   <div className='messageList'>\n//     //     {\n//     //       messageList.map((e,i)=><Message text={e.text} author={e.author} key={i}></Message>)\n//     //     }\n//     //   </div> \n//     // </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}